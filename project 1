//Numerical integration of polynomial using basic implementation of DSA in C++

#include<bits/stdc++.h>
using namespace std;
int main()
{
    /*
    deifne degree of polynomial
    define the polynomial constant
    define integration from x=a to x=b
    construct a polynomial
    do integration:
    1. get xi & yi
    2. calculate trapezium  i 
    3. sum all trapezium
    printout results*/

    int deg , i , j;
    cout << "define the degree of polynomial : " << " " ;
    cin >> deg;

    float A[11];

    cout << "define polynomial constant : " << endl ;
    for(i=0 ; i<=deg ; i++)
    {
        cout << "intput values for A[" << i << "] : " << " " ;
        cin >> A[i];
    }

    float a,b;
    cout << "intput integration range from : " << " " ;
    cin>> a;
    cout << "intput integration range to : " << " " ;
    cin>> b;

    cout<<" f(x) = "<< " " ;
    for(i = 0 ; i <= deg ; i++)
    {
        if(i==0)
        {
           cout << A[i] << " + " ;  
        }
        else if( i == deg)
        {
            cout << A[i] << "x^" << i ;
        }
        else
        {
            cout << A[i] << "x^" << i << " + " ;    
        }
    }
    cout << endl;
    
    int num_p = 200; 
    float p = (b-a) / num_p;

    float x[201];
    float y[201];

    for( i = 0 ; i <= num_p ; i++)
    {
        x[i] = a + i * p ; 
        y[i] = 0.0;
        for(j = 0 ; j <= deg ; j++)
        {
            y[i] += A[j] * pow(x[i] , j) ;
        }
    }

    float trapezium[100];
    for(i = 0 ; i < num_p ; i++)
    {
        trapezium[i] = 0.5 * p * ( y[i] + y[i+1] );
    }

    float sum = 0.0;
    for(i = 0 ; i < num_p ; i++)
    {
        sum += trapezium[i];
    }

    cout << " area under the curve is : " << sum << endl;

    cout << endl ;

}
